{"version":3,"sources":["components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControl/FormsControls.module.css","utils/validators/validators.tsx","components/common/FormsControl/FormsControl.tsx","components/Dialogs/Dialogs.module.css"],"names":["DialogItem","props","className","s","dialog","active","to","id","name","Message","message","validateFormMessage","validateItem","AddMessageFormFormik","initialValues","newMessageBody","onSubmit","values","setSubmitting","addNewMessage","component","Textarea","validate","placeholder","type","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","dialogsItems","formData","onSendMessageClick","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dispatch","sendMessageAC","Component","RedirectComponent","this","restProps","React","module","exports","maxLength","errors","length","field","form","touched","isValid","error","errorMessage","Input","createField"],"mappings":"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","file":"static/js/5.6b24ed97.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemType> = (props) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return  <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {Field, Form, Formik} from 'formik';\r\nimport {validateItem} from '../../utils/validators/validators';\r\nimport {Textarea} from '../common/FormsControl/FormsControl';\r\n\r\nconst validateFormMessage = validateItem(100);\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map((d: any) => <DialogItem name={d.name}\r\n                                                                         key={d.id}\r\n                                                                         id={d.id}/>)\r\n    let messagesElements = props.dialogsPage.messages.map((m: any) => <Message message={m.message} key={m.id}/>)\r\n\r\n\r\n    const addNewMessage = (formData: FormMessageDataType) => {\r\n        props.onSendMessageClick(formData.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageFormFormik addNewMessage={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormFormik = (props: AddMessagePropsType) => {\r\n    const submit = (values: FormMessageDataType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        props.addNewMessage(values)\r\n    }\r\n    return <div>\r\n        <Formik\r\n            initialValues={{newMessageBody: ''}}\r\n            onSubmit={submit}\r\n        >\r\n            {() => (\r\n                <Form>\r\n                    <div>\r\n                        <Field component={Textarea}\r\n                               validate={validateFormMessage}\r\n                               name={'newMessageBody'}\r\n                               placeholder={'Enter your message'}/>\r\n                    </div>\r\n                    <div>\r\n                        <button type={'submit'}>SEND</button>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n}\r\nexport default Dialogs;\r\n\r\n//types;\r\nexport type FormMessageDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\ntype AddMessagePropsType = {\r\n    addNewMessage: (formData: FormMessageDataType) => void\r\n}","import {Redirect} from 'react-router-dom';\r\nimport React, {ComponentType} from 'react';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStateToPropsTypeForRedirect = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype AuthRedirectType = MapStateToPropsTypeForRedirect\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsTypeForRedirect => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<AuthRedirectType> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props;\r\n            //проверка на авторизацию\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...restProps as T} />\r\n        }\r\n    }\r\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport {InitialDialogStateType, sendMessageAC} from '../../redux/dialogs-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitialDialogStateType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    onSendMessageClick:(newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType  => {\r\n    return {\r\n        onSendMessageClick: (newMessageBody) => {\r\n            dispatch(sendMessageAC(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n        connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n        withAuthRedirect,\r\n    )(Dialogs);\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__mPXaD\",\"error\":\"FormsControls_error__3qOob\",\"errorMessage\":\"FormsControls_errorMessage__Q4gxl\"};","export const validateItem = (maxLength: number) => (values: string) => {\r\n    let errors;\r\n    if (!values) {\r\n        errors = 'Field is required';\r\n    } else if (values.length > maxLength) {\r\n        errors = `Max length is ${maxLength} symbols`;\r\n    }\r\n    return errors;\r\n};","import s from './FormsControls.module.css'\r\nimport {Field} from 'formik';\r\nimport React from 'react';\r\n\r\nexport const Textarea = ({field, form: {touched, errors, isValid}, ...props}: any) => {\r\n  return (\r\n    <div>\r\n            <textarea\r\n              {...field} {...props}\r\n              className={\r\n                !isValid && touched[field.name] && errors[field.name] ? s.error : ''\r\n              }\r\n            />\r\n      {touched[field.name] && errors[field.name] && (\r\n        <div className={s.errorMessage}>{errors[field.name]}</div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Input = ({field, form: {touched, errors, isValid}, ...props}: any) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        {...field} {...props}\r\n        className={\r\n          !isValid && touched[field.name] && errors[field.name] ? s.error : ''\r\n        }\r\n      />\r\n      {!isValid && touched[field.name] && errors[field.name] && (\r\n        <div className={s.errorMessage}>{errors[field.name]}</div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const createField = (component: any, type: string, validate: (values: string) => void, name: string,  placeholder: string) => (\r\n  <div>\r\n  <Field component={component} type={type} validate={validate} name={name}\r\n         placeholder={placeholder}/>\r\n  </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2Kdio\",\"dialogsItems\":\"Dialogs_dialogsItems__23C4R\",\"active\":\"Dialogs_active__3np8i\",\"messages\":\"Dialogs_messages__So41U\"};"],"sourceRoot":""}