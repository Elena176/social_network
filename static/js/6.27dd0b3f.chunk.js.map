{"version":3,"sources":["Login/Login.tsx","components/common/FormsControl/FormsControls.module.css","utils/validators/validators.tsx","components/common/FormsControl/FormsControl.tsx"],"names":["validateLoginForm","validateItem","LoginFormFormik","onSubmit","error","initialValues","email","password","rememberMe","values","setSubmitting","isSubmitting","createField","Input","className","component","type","name","s","errorMessage","disabled","connect","state","isAuth","auth","logIn","to","formData","module","exports","maxLength","errors","length","Textarea","field","form","touched","isValid","props","validate","placeholder"],"mappings":"4HAAA,uIAUMA,EAAoBC,YAAa,IAE1BC,EAAgD,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAKvE,OAAO,8BACL,cAAC,IAAD,CACEC,cAAe,CAACC,MAAO,GAAIC,SAAU,GAAIC,YAAY,GACrDL,SAPW,SAACM,EAAD,GAAgG,IAAxEC,EAAuE,EAAvEA,cACrCP,EAASM,GACTC,GAAc,IAGd,SAIG,gBAAEC,EAAF,EAAEA,aAAF,OACC,eAAC,IAAD,WACGC,YAAYC,IAAO,OAAQb,EAAmB,QAAS,SACvDY,YAAYC,IAAO,WAAYb,EAAmB,WAAY,YAC/D,wBAAOc,UAAW,GAAlB,UACE,cAAC,IAAD,CAAOC,UAAWF,IAAOG,KAAM,WAAYC,KAAM,eADnD,iBAIA,8BACGb,GAAS,sBAAKU,UAAWI,IAAEC,aAAlB,cAAkCf,EAAlC,SAEZ,8BACE,wBAAQY,KAAK,SAASI,SAAUT,EAAhC,8BA2BGU,uBANS,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,OACnBnB,MAAOkB,EAAME,KAAKpB,SAG6E,CAACqB,WAArFJ,EAnByB,SAAC,GAA4B,IAA3BE,EAA0B,EAA1BA,OAAQnB,EAAkB,EAAlBA,MAAOqB,EAAW,EAAXA,MAIvD,OAAIF,EACK,cAAC,IAAD,CAAUG,GAAI,aAEhB,gCACL,uCACA,cAACxB,EAAD,CAAiBC,SARF,SAACwB,GAChBF,EAAME,EAASrB,MAAOqB,EAASpB,SAAUoB,EAASnB,aAObJ,MAAOA,W,mBClDhDwB,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,aAAe,sC,gCCDvH,kCAAO,IAAM5B,EAAe,SAAC6B,GAAD,OAAuB,SAACrB,GAChD,IAAIsB,EAMJ,OALKtB,EAEMA,EAAOuB,OAASF,IACvBC,EAAM,wBAAoBD,EAApB,aAFNC,EAAS,oBAINA,K,gMCHEE,EAAW,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,MAA4D,IAArDC,KAAOC,EAA8C,EAA9CA,QAASL,EAAqC,EAArCA,OAAQM,EAA6B,EAA7BA,QAAaC,EAAgB,gCACpF,OACE,gCACQ,gEACMJ,GAAWI,GADjB,IAEExB,WACGuB,GAAWD,EAAQF,EAAMjB,OAASc,EAAOG,EAAMjB,MAAQC,IAAEd,MAAQ,MAG3EgC,EAAQF,EAAMjB,OAASc,EAAOG,EAAMjB,OACnC,qBAAKH,UAAWI,IAAEC,aAAlB,SAAiCY,EAAOG,EAAMjB,YAMzCJ,EAAQ,SAAC,GAA8D,IAA7DqB,EAA4D,EAA5DA,MAA4D,IAArDC,KAAOC,EAA8C,EAA9CA,QAASL,EAAqC,EAArCA,OAAQM,EAA6B,EAA7BA,QAAaC,EAAgB,gCACjF,OACE,gCACE,6DACMJ,GAAWI,GADjB,IAEExB,WACGuB,GAAWD,EAAQF,EAAMjB,OAASc,EAAOG,EAAMjB,MAAQC,IAAEd,MAAQ,OAGpEiC,GAAWD,EAAQF,EAAMjB,OAASc,EAAOG,EAAMjB,OAC/C,qBAAKH,UAAWI,IAAEC,aAAlB,SAAiCY,EAAOG,EAAMjB,YAMzCL,EAAc,SAACG,EAAgBC,EAAcuB,EAAoCtB,EAAeuB,GAAlF,OACzB,8BACA,cAAC,IAAD,CAAOzB,UAAWA,EAAWC,KAAMA,EAAMuB,SAAUA,EAAUtB,KAAMA,EAC5DuB,YAAaA","file":"static/js/6.27dd0b3f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Field, Form, Formik} from 'formik';\r\nimport {createField, Input} from '../components/common/FormsControl/FormsControl';\r\nimport {validateItem} from '../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {logIn} from '../redux/auth-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport s from './../components/common/FormsControl/FormsControls.module.css';\r\n\r\nconst validateLoginForm = validateItem(30)\r\n\r\nexport const LoginFormFormik: React.FC<LoginFormPropsType> = ({onSubmit, error}) => {\r\n  const submit = (values: FormDataType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n    onSubmit(values)\r\n    setSubmitting(false)\r\n  }\r\n  return <div>\r\n    <Formik\r\n      initialValues={{email: '', password: '', rememberMe: false}}\r\n      onSubmit={submit}\r\n    >\r\n      {({isSubmitting}) => (\r\n        <Form>\r\n          {createField(Input, 'text', validateLoginForm, 'email', 'email')}\r\n          {createField(Input, 'password', validateLoginForm, 'password', 'password')}\r\n          <label className={''}>\r\n            <Field component={Input} type={'checkbox'} name={'rememberMe'}/>\r\n            remember me\r\n          </label>\r\n          <div>\r\n            {error && <div className={s.errorMessage}> {error} </div>}\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\" disabled={isSubmitting}>Login</button>\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  </div>\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = ({isAuth, error, logIn}) => {\r\n  const onSubmit = (formData: FormDataType) => {\r\n    logIn(formData.email, formData.password, formData.rememberMe)\r\n  }\r\n  if (isAuth) {\r\n    return <Redirect to={'/profile'}/>\r\n  }\r\n  return <div>\r\n    <h1>LOGIN</h1>\r\n    <LoginFormFormik onSubmit={onSubmit} error={error}/>\r\n  </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    error: state.auth.error,\r\n  }\r\n}\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {logIn})(Login);\r\n\r\n\r\n//types\r\ntype FormDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n}\r\n\r\ntype LoginFormPropsType = {\r\n  onSubmit: (formData: FormDataType) => void\r\n  error: string | null\r\n}\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n  error: string | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  logIn: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype LoginPropsType = MapStatePropsType & MapDispatchPropsType;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__mPXaD\",\"error\":\"FormsControls_error__3qOob\",\"errorMessage\":\"FormsControls_errorMessage__Q4gxl\"};","export const validateItem = (maxLength: number) => (values: string) => {\r\n    let errors;\r\n    if (!values) {\r\n        errors = 'Field is required';\r\n    } else if (values.length > maxLength) {\r\n        errors = `Max length is ${maxLength} symbols`;\r\n    }\r\n    return errors;\r\n};","import s from './FormsControls.module.css'\r\nimport {Field} from 'formik';\r\nimport React from 'react';\r\n\r\nexport const Textarea = ({field, form: {touched, errors, isValid}, ...props}: any) => {\r\n  return (\r\n    <div>\r\n            <textarea\r\n              {...field} {...props}\r\n              className={\r\n                !isValid && touched[field.name] && errors[field.name] ? s.error : ''\r\n              }\r\n            />\r\n      {touched[field.name] && errors[field.name] && (\r\n        <div className={s.errorMessage}>{errors[field.name]}</div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Input = ({field, form: {touched, errors, isValid}, ...props}: any) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        {...field} {...props}\r\n        className={\r\n          !isValid && touched[field.name] && errors[field.name] ? s.error : ''\r\n        }\r\n      />\r\n      {!isValid && touched[field.name] && errors[field.name] && (\r\n        <div className={s.errorMessage}>{errors[field.name]}</div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const createField = (component: any, type: string, validate: (values: string) => void, name: string,  placeholder: string) => (\r\n  <div>\r\n  <Field component={component} type={type} validate={validate} name={name}\r\n         placeholder={placeholder}/>\r\n  </div>\r\n)"],"sourceRoot":""}