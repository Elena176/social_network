{"version":3,"sources":["components/Profile/My posts/MyPosts.module.css","components/Profile/My posts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/My posts/Post/Post.tsx","components/Profile/My posts/MyPosts.tsx","components/Profile/My posts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControl/FormsControls.module.css","utils/validators/validators.tsx","components/common/FormsControl/FormsControl.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","value","onChange","e","currentTarget","onBlur","updateUserStatus","autoFocus","ProfileInfo","profile","className","s","img","src","alt","descriptionBlock","ProfileStatusWithHook","photos","large","fullName","Preloader","Post","item","message","likeValue","validateAddPostMessageForm","validateItem","MyPosts","React","memo","postsElement","posts","map","p","id","postsBlock","addNewPost","addPost","newPostText","AddPostFormFormik","initialValues","onSubmit","values","setSubmitting","component","Textarea","validate","name","placeholder","type","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","String","authorizedUserId","history","push","getProfile","getUserStatus","Component","compose","auth","isAuth","withRouter","maxLength","errors","length","field","form","touched","isValid","error","errorMessage","Input","createField"],"mappings":"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","file":"static/js/4.2295dbaa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3DS8I\",\"posts\":\"MyPosts_posts__2vATH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item___-idf\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input value={status} onChange={onStatusChange} onBlur={deActivateEditMode} autoFocus={true}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileUserType} from '../../../redux/Types';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHook';\r\n\r\ntype ProfileInfoPropsType = {\r\n  profile: ProfileUserType\r\n  status: string\r\n  updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateUserStatus}: ProfileInfoPropsType) => {\r\n  if (!profile) {\r\n    return <Preloader/>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.img}>\r\n        <img\r\n          src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSs8ye7sE-0tcxVySt41XzQewEJsrDUg7YdNw&usqp=CAU'}\r\n          alt={''}/>\r\n      </div>\r\n      <div className={s.descriptionBlock}>\r\n        {/* <ProfileStatus  status={props.status} updateUserStatus={props.updateUserStatus}/>*/}\r\n        <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\r\n        <img src={profile.photos.large} alt={''}/>\r\n        {profile.fullName}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostType = {\r\n    message: string\r\n    likeValue: number\r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQIVAXcV-lIw7ddkFgavYPbJdTg5-WiJzQjow&usqp=CAU'} alt={''}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like: {props.likeValue}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {Field, Form, Formik} from 'formik';\r\nimport {validateItem} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControl/FormsControl';\r\n\r\nconst validateAddPostMessageForm = validateItem(50);\r\n\r\nconst MyPosts: React.FC<MyPostsPropsType> = React.memo(props => {\r\n  const postsElement = props.posts.map(p => <Post message={p.message}\r\n                                                  likeValue={p.likeValue}\r\n                                                  key={p.id}/>);\r\n\r\n  const addNewPost = (value: FormNewPostType) => {\r\n    props.addPost(value.newPostText)\r\n  }\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <div>\r\n        <AddPostFormFormik addNewPost={addNewPost}/>\r\n      </div>\r\n      <div className={s.posts}>\r\n        {postsElement}\r\n      </div>\r\n    </div>\r\n  )\r\n});\r\n\r\n\r\ntype AddPostPropsType = {\r\n  addNewPost: (value: FormNewPostType) => void\r\n}\r\n\r\nexport const AddPostFormFormik = (props: AddPostPropsType) => {\r\n  const submit = (values: FormNewPostType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n    props.addNewPost(values)\r\n  }\r\n  return <div>\r\n    <Formik\r\n      initialValues={{newPostText: ''}}\r\n      onSubmit={submit}\r\n    >\r\n      {() => (\r\n        <Form>\r\n          <div>\r\n            <Field\r\n              component={Textarea}\r\n              validate={validateAddPostMessageForm}\r\n              name={'newPostText'}\r\n              placeholder={'Enter your text'}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <button type={'submit'}>Add post</button>\r\n            <button type={'submit'}>Remove</button>\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  </div>\r\n}\r\n\r\nexport default MyPosts;\r\n\r\n//types;\r\nexport type FormNewPostType = {\r\n  newPostText: string\r\n}","import MyPosts from './MyPosts';\r\nimport {\r\n    addPostActionCreator,\r\n    PostType\r\n} from '../../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {Dispatch} from 'redux';\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './My posts/MyPostsContainer';\r\nimport {ProfileUserType} from '../../redux/Types';\r\n\r\ntype ProfilePropsType = {\r\n  profile: ProfileUserType\r\n  status: string\r\n  updateUserStatus: (status: string) => void\r\n}\r\nconst Profile = ({profile, updateUserStatus, status}: ProfilePropsType) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo profile={profile}\r\n                   status={status} updateUserStatus={updateUserStatus}/>\r\n      <MyPostsContainer/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {getProfile, getUserStatus, updateUserStatus} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter } from 'react-router';\r\nimport {compose} from 'redux';\r\nimport {ProfileUserType} from '../../redux/Types';\r\n//import {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n    componentDidMount() {\r\n\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = String(this.props.authorizedUserId);\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            /*раскукоживаем пропсы для Profile*/\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateUserStatus={this.props.updateUserStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {getProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n    //withAuthRedirect,\r\n)(ProfileContainer);\r\n\r\n//types\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\ntype ProfilePropsType = RouteComponentProps<PathParamsType> & PropsType;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__mPXaD\",\"error\":\"FormsControls_error__3qOob\",\"errorMessage\":\"FormsControls_errorMessage__Q4gxl\"};","export const validateItem = (maxLength: number) => (values: string) => {\r\n    let errors;\r\n    if (!values) {\r\n        errors = 'Field is required';\r\n    } else if (values.length > maxLength) {\r\n        errors = `Max length is ${maxLength} symbols`;\r\n    }\r\n    return errors;\r\n};","import s from './FormsControls.module.css'\r\nimport {Field} from 'formik';\r\nimport React from 'react';\r\n\r\nexport const Textarea = ({field, form: {touched, errors, isValid}, ...props}: any) => {\r\n  return (\r\n    <div>\r\n            <textarea\r\n              {...field} {...props}\r\n              className={\r\n                !isValid && touched[field.name] && errors[field.name] ? s.error : ''\r\n              }\r\n            />\r\n      {touched[field.name] && errors[field.name] && (\r\n        <div className={s.errorMessage}>{errors[field.name]}</div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Input = ({field, form: {touched, errors, isValid}, ...props}: any) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        {...field} {...props}\r\n        className={\r\n          !isValid && touched[field.name] && errors[field.name] ? s.error : ''\r\n        }\r\n      />\r\n      {!isValid && touched[field.name] && errors[field.name] && (\r\n        <div className={s.errorMessage}>{errors[field.name]}</div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const createField = (component: any, type: string, validate: (values: string) => void, name: string,  placeholder: string) => (\r\n  <div>\r\n  <Field component={component} type={type} validate={validate} name={name}\r\n         placeholder={placeholder}/>\r\n  </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3hePI\",\"img\":\"ProfileInfo_img__2natS\"};"],"sourceRoot":""}